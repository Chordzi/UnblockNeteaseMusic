{"version":3,"sources":["../../../../src/modules/utils/netease/index.js"],"names":["netease","ip","baseUrl","body","JSON","parse","songId","self","data","id","v","header","options","url","headers","method","gzip","resolve","reject","err","res","console","error","red","urlInfo","log","green","bitrate","filesize","hash"],"mappings":"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","file":"index.js","sourcesContent":["import colors from 'colors';\nimport request from 'request';\nimport crypto from 'crypto';\n\nexport default class netease {\n  constructor(ip) {\n    this.baseUrl = \"http://\" + ip;\n  }\n\n  getDownloadReturnCode(body) {\n    body = JSON.parse(body);\n    return body[\"data\"][\"code\"];\n  };\n\n  getDownloadUrl(body) {\n    body = JSON.parse(body);\n    return body[\"data\"][\"url\"];\n  };\n\n  getSongName(body) {\n    body = JSON.parse(body);\n    return body[\"songs\"][0]['name'];\n  };\n\n  getArtistName(body) {\n    body = JSON.parse(body);\n    return body[\"songs\"][0]['artists'][0]['name'];\n  };\n\n  getDownloadSongId(body) {\n    body = JSON.parse(body);\n    return body[\"data\"][\"id\"];\n  };\n\n  getSongDetail(songId) {\n    let self = this;\n\n    let data = [{\n      id: songId,\n      v: 0\n    }];\n\n    let header = {\n      'host': 'music.163.com',\n      'content-type': 'application/x-www-form-urlencoded'\n    };\n\n    let options = {\n      url: self.baseUrl + \"/api/song/detail/?ids=[\" + songId + \"]&id=\" + songId,\n      headers: header,\n      method: 'get',\n      gzip: true\n    };\n    return new Promise((resolve, reject) => {\n      request(options, function(err, res, body) {\n        if (err) {\n          console.error(err.red);\n          reject(err);\n        } else {\n          resolve(body);\n        }\n      });\n    });\n  };\n\n  modifyPlayerApiCustom(urlInfo, body) {\n    console.log(\"Player API Injected\".green);\n\n    let self = this;\n\n    console.log(\"New URL is \".green + urlInfo.url);\n    body[\"url\"] = urlInfo.url;\n    body[\"br\"] = urlInfo.bitrate;\n    body[\"code\"] = \"200\";\n    body[\"size\"] = urlInfo.filesize;\n    body[\"md5\"] = urlInfo.hash;\n    body[\"type\"] = \"mp3\";\n\n    return body;\n  };\n\n  modifyDownloadApiCustom(urlInfo, body) {\n    console.log(\"Download API Injected\".green);\n\n    let self = this;\n\n    body = JSON.parse(body);\n\n    console.log(\"New URL is \".green + urlInfo.url);\n    body[\"data\"][\"url\"] = urlInfo.url;\n    body[\"data\"][\"br\"] = urlInfo.bitrate;\n    body[\"data\"][\"code\"] = \"200\";\n    body[\"data\"][\"size\"] = urlInfo.filesize;\n    body[\"data\"][\"md5\"] = urlInfo.hash;\n    body[\"data\"][\"type\"] = \"mp3\";\n\n    return JSON.stringify(body);\n  };\n}\n"]}