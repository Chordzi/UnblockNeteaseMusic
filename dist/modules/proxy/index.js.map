{"version":3,"sources":["../../../src/modules/proxy/index.js"],"names":["sendRequest","options","defaults","method","followRedirect","timeout","resolve","reject","err","res","body","post","url","headers","gzip","then","catch","middleware","ctx","next","req","request","reponse","ip","forceIp","length","encoding","charset","rawBody","result","set","defaultBody"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAIA,cAAc,SAAdA,WAAc,CAASC,OAAT,EAAkB;AAClC,MAAIC,WAAW;AACbC,YAAQ,KADK;AAEbC,oBAAgB,KAFH;AAGbC,aAAS;AAHI,GAAf;AAKAJ,YAAU,sBAAO,KAAP,EAAcC,QAAd,EAAwBD,OAAxB,CAAV;AACA,SAAO,sBAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;AACtC,2BAAQN,OAAR,EAAiB,UAASO,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACxC,UAAIF,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQ,CAACG,GAAD,EAAMC,IAAN,CAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAhBD;;AAkBA;AACA,IAAIC,OAAO,SAAPA,IAAO,CAASC,GAAT,EAAcC,OAAd,EAAuBH,IAAvB,EAA6B;AACtC,MAAIT,UAAU;AACZW,SAAKA,GADO;AAEZC,aAASA,OAFG;AAGZV,YAAQ,MAHI;AAIZW,UAAM;AAJM,GAAd;AAMA,MAAI,CAAC,CAACJ,IAAN,EAAY;AACVT,YAAQS,IAAR,GAAeA,IAAf;AACD;;AAED,SAAO,sBAAY,UAACJ,OAAD,EAAUC,MAAV,EAAqB;AACtCP,gBAAYC,OAAZ,EACGc,IADH,CACQ,UAACN,GAAD;AAAA,aAASH,QAAQG,GAAR,CAAT;AAAA,KADR,EAEGO,KAFH,CAES,UAACR,GAAD;AAAA,aAASD,OAAOC,GAAP,CAAT;AAAA,KAFT;AAGD,GAJM,CAAP;AAKD,CAhBD;;AAkBA,IAAIS,aAAa,iBAAeC,GAAf,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,aADW,GACLF,IAAIG,OADC;AAEXZ,aAFW,GAELS,IAAII,OAFC;;AAAA,gBAIXF,IAAIjB,MAAJ,IAAc,MAJH;AAAA;AAAA;AAAA;;AAKToB,YALS,GAKJ,iBAAOC,OAAP,GAAiB,iBAAOA,OAAxB,GAAkC,eAL9B;AAMTZ,aANS,GAMH,YAAYW,EAAZ,GAAiBH,IAAIR,GANlB;;AAObQ,cAAIP,OAAJ,CAAY,MAAZ,IAAsB,eAAtB;;AAPa;AAAA,6CASO,uBAAWK,IAAIE,GAAf,EAAoB;AACtCK,oBAAQP,IAAIO,MAD0B;AAEtCC,sBAAUR,IAAIS;AAFwB,WAApB,CATP;;AAAA;AASTC,iBATS;AAAA;AAAA,6CAcMjB,KAAKC,GAAL,EAAUQ,IAAIP,OAAd,EAAuBe,OAAvB,CAdN;;AAAA;AAcTC,gBAdS;AAeThB,iBAfS,GAeCgB,OAAO,CAAP,EAAUhB,OAfX;AAgBTH,cAhBS,GAgBFmB,OAAO,CAAP,CAhBE;;AAiBb,iBAAOhB,QAAQ,kBAAR,CAAP;AACA;AACAK,cAAIY,GAAJ,CAAQjB,OAAR;AACAK,cAAIa,WAAJ,GAAkBrB,IAAlB;;AAEA;AAtBa;AAAA,6CAuBPS,MAvBO;;AAAA;AAwBb;;AAEAD,cAAIR,IAAJ,GAAWQ,IAAIa,WAAf;;AA1Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;kBA8Bed,U","file":"index.js","sourcesContent":["import request from 'request';\nimport getRawBody from 'raw-body';\nimport extend from 'extend';\nimport config from '../config';\n\n\nlet sendRequest = function(options) {\n  let defaults = {\n    method: 'get',\n    followRedirect: false,\n    timeout: 10000\n  };\n  options = extend(false, defaults, options);\n  return new Promise((resolve, reject) => {\n    request(options, function(err, res, body) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve([res, body]);\n      }\n    });\n  });\n};\n\n// 封装 request post\nlet post = function(url, headers, body) {\n  let options = {\n    url: url,\n    headers: headers,\n    method: 'post',\n    gzip: true\n  };\n  if (!!body) {\n    options.body = body;\n  }\n\n  return new Promise((resolve, reject) => {\n    sendRequest(options)\n      .then((res) => resolve(res))\n      .catch((err) => reject(err));\n  });\n};\n\nlet middleware = async function(ctx, next) {\n  let req = ctx.request;\n  let res = ctx.reponse;\n\n  if (req.method == 'POST') {\n    let ip = config.forceIp ? config.forceIp : '223.252.199.7';\n    let url = 'http://' + ip + req.url;\n    req.headers['host'] = 'music.163.com';\n\n    let rawBody = await getRawBody(ctx.req, {\n      length: ctx.length,\n      encoding: ctx.charset\n    });\n    // console.log(rawBody.toString());\n    let result = await post(url, req.headers, rawBody);\n    let headers = result[0].headers;\n    let body = result[1];\n    delete headers['content-encoding'];\n    // console.log(body);\n    ctx.set(headers);\n    ctx.defaultBody = body;\n\n    // console.log(\"before: \" +  ctx.defaultBody);\n    await next();\n    // console.log(\"after: \" +  ctx.defaultBody);\n\n    ctx.body = ctx.defaultBody;\n  }\n};\n\nexport default middleware;\n"]}