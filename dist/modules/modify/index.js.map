{"version":3,"sources":["../../../src/modules/modify/index.js"],"names":["utils","modify","ctx","next","req","request","res","response","songId","urlInfo","test","url","data","JSON","parse","defaultBody","console","error","newData","row","playbackReturnCode","code","id","getUrlInfo","log","netease","modifyPlayerApiCustom","red","green","push","getDownloadReturnCode","getDownloadSongId","modifyDownloadApiCustom","getDownloadUrl"],"mappings":"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","file":"index.js","sourcesContent":["import colors from 'colors';\nimport Utils from '../utils';\n\nlet utils = new Utils();\n\nlet modify = async function(ctx, next) {\n  let req = ctx.request;\n  let res = ctx.response;\n\n  let songId,\n      urlInfo;\n\n  if (/^\\/eapi\\/song\\/enhance\\/player\\/url/.test(req.url)) {\n    let data = '';\n\n    try {\n      data = JSON.parse(ctx.defaultBody);\n    } catch (err) {\n      console.error(err);\n      return next;\n    }\n    let newData = [];\n    for(let row of data[\"data\"]) {\n      let playbackReturnCode = row.code;\n      songId = row.id;\n\n      if (playbackReturnCode != 200) {\n        try{\n          urlInfo = await utils.getUrlInfo(songId);\n        } catch(err) {\n          return console.log(err);\n        }\n        if (urlInfo) {\n          row = utils.netease.modifyPlayerApiCustom(urlInfo, row);\n        } else {\n          console.log('No resource.'.red);\n        }\n      } else {\n        console.log('Playback bitrate is not changed. The song URL is '.green + row.url);\n      }\n      newData.push(row);\n    }\n    data[\"data\"] = newData;\n    ctx.defaultBody = JSON.stringify(data);\n    return next;\n\n  }\n\n  else if (/^\\/eapi\\/song\\/enhance\\/download\\/url/.test(req.url)) {\n\n    if (utils.netease.getDownloadReturnCode(ctx.defaultBody) != 200) {\n      songId = utils.netease.getDownloadSongId(ctx.defaultBody);\n      try{\n        urlInfo = await utils.getUrlInfo(songId);\n      } catch(err) {\n        return console.log(err);\n      }\n      if (urlInfo) {\n        ctx.defaultBody = utils.netease.modifyDownloadApiCustom(urlInfo, ctx.defaultBody);\n      } else {\n        console.log('No resource.'.red);\n      }\n      return next;\n    } else {\n      console.log('Download bitrate is not changed. The song URL is '.green + utils.netease.getDownloadUrl(ctx.defaultBody).green);\n      return next;\n    }\n  }\n\n  else {\n    return next;\n  }\n\n};\n\nexport default modify;\n"]}